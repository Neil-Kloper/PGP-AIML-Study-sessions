{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tensorflow Practice with term deposit prediction\n",
    "Documentation referenced is on page: https://www.tensorflow.org/api_docs/python/tf/keras/layers/\n",
    "Kaggle course referenced: https://www.kaggle.com/learn/intro-to-deep-learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>2143</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>29</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1506</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age           job  marital  education default  balance housing loan  \\\n",
       "0   58    management  married   tertiary      no     2143     yes   no   \n",
       "1   44    technician   single  secondary      no       29     yes   no   \n",
       "2   33  entrepreneur  married  secondary      no        2     yes  yes   \n",
       "3   47   blue-collar  married    unknown      no     1506     yes   no   \n",
       "4   33       unknown   single    unknown      no        1      no   no   \n",
       "\n",
       "   contact  day month  duration  campaign  pdays  previous poutcome Target  \n",
       "0  unknown    5   may       261         1     -1         0  unknown     no  \n",
       "1  unknown    5   may       151         1     -1         0  unknown     no  \n",
       "2  unknown    5   may        76         1     -1         0  unknown     no  \n",
       "3  unknown    5   may        92         1     -1         0  unknown     no  \n",
       "4  unknown    5   may       198         1     -1         0  unknown     no  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bank = pd.read_csv('C:/ML_Data/bank-full.csv')\n",
    "bank.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating custom function to encode the target column\n",
    "def func(num):\n",
    "    if num == 'yes':\n",
    "        return 1\n",
    "    else: return 0\n",
    "bank.Target = pd.Series([func(x) for x in bank.Target], index=bank.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = bank.drop('Target', axis=1)\n",
    "y = bank.Target\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(X,y, train_size=.75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pipeline function to transform the data for training\n",
    "# Data is scaled and catagorical columns are one hot encoded\n",
    "\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.compose import make_column_transformer\n",
    "\n",
    "ohe = OneHotEncoder()\n",
    "scaler = StandardScaler()\n",
    "\n",
    "cat_cols = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome'] \n",
    "num_cols = list(x_train.describe().columns)\n",
    "\n",
    "preprocessor = make_column_transformer(\n",
    "    (ohe, cat_cols), (scaler, num_cols)\n",
    ")\n",
    "\n",
    "\n",
    "x_train = preprocessor.fit_transform(x_train)\n",
    "x_test = preprocessor.transform(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import callbacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import initializers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "# model creation and experimentation\n",
    "\n",
    "model = keras.Sequential([\n",
    "    layers.GaussianNoise(.1),\n",
    "    layers.Dense(input_shape=[x_train.shape[1]], units=128, kernel_initializer=initializers.RandomNormal(stddev=.25), activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.AlphaDropout(rate=.2),\n",
    "\n",
    "    layers.GaussianNoise(.3),\n",
    "#     layers.experimental.EinsumDense(output_shape=64, equation=\"ab,bc->ac\"),\n",
    "\n",
    "    layers.Dense(units=64, kernel_initializer=initializers.RandomNormal(stddev=.25), activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dropout(rate=.1),\n",
    "    \n",
    "    \n",
    "    layers.Dense(units=1, activation='sigmoid')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['binary_accuracy', 'AUC'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "early_stopping = keras.callbacks.EarlyStopping(\n",
    "    patience=15,\n",
    "    min_delta=.01,\n",
    "    restore_best_weights=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "265/265 [==============================] - 1s 2ms/step - loss: 0.5960 - binary_accuracy: 0.7093 - auc: 0.6795 - val_loss: 0.2629 - val_binary_accuracy: 0.8947 - val_auc: 0.8990\n",
      "Epoch 2/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2869 - binary_accuracy: 0.8892 - auc: 0.8326 - val_loss: 0.2374 - val_binary_accuracy: 0.8965 - val_auc: 0.9113\n",
      "Epoch 3/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2566 - binary_accuracy: 0.8923 - auc: 0.8738 - val_loss: 0.2340 - val_binary_accuracy: 0.8958 - val_auc: 0.9164\n",
      "Epoch 4/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2461 - binary_accuracy: 0.8978 - auc: 0.8859 - val_loss: 0.2303 - val_binary_accuracy: 0.8980 - val_auc: 0.9188\n",
      "Epoch 5/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2361 - binary_accuracy: 0.8986 - auc: 0.8953 - val_loss: 0.2257 - val_binary_accuracy: 0.8965 - val_auc: 0.9187\n",
      "Epoch 6/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2312 - binary_accuracy: 0.8988 - auc: 0.8987 - val_loss: 0.2260 - val_binary_accuracy: 0.8978 - val_auc: 0.9212\n",
      "Epoch 7/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2275 - binary_accuracy: 0.9008 - auc: 0.9067 - val_loss: 0.2237 - val_binary_accuracy: 0.8962 - val_auc: 0.9210\n",
      "Epoch 8/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2274 - binary_accuracy: 0.9007 - auc: 0.9054 - val_loss: 0.2237 - val_binary_accuracy: 0.8978 - val_auc: 0.9233\n",
      "Epoch 9/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2204 - binary_accuracy: 0.9039 - auc: 0.9119 - val_loss: 0.2229 - val_binary_accuracy: 0.8973 - val_auc: 0.9230\n",
      "Epoch 10/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2195 - binary_accuracy: 0.9029 - auc: 0.9116 - val_loss: 0.2201 - val_binary_accuracy: 0.8987 - val_auc: 0.9244\n",
      "Epoch 11/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2173 - binary_accuracy: 0.9049 - auc: 0.9123 - val_loss: 0.2198 - val_binary_accuracy: 0.8987 - val_auc: 0.9242\n",
      "Epoch 12/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2199 - binary_accuracy: 0.9025 - auc: 0.9140 - val_loss: 0.2200 - val_binary_accuracy: 0.8985 - val_auc: 0.9246\n",
      "Epoch 13/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2081 - binary_accuracy: 0.9083 - auc: 0.9200 - val_loss: 0.2151 - val_binary_accuracy: 0.9010 - val_auc: 0.9253\n",
      "Epoch 14/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2159 - binary_accuracy: 0.9039 - auc: 0.9183 - val_loss: 0.2154 - val_binary_accuracy: 0.8995 - val_auc: 0.9260\n",
      "Epoch 15/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2097 - binary_accuracy: 0.9068 - auc: 0.9205 - val_loss: 0.2188 - val_binary_accuracy: 0.8989 - val_auc: 0.9272\n",
      "Epoch 16/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2123 - binary_accuracy: 0.9052 - auc: 0.9194 - val_loss: 0.2151 - val_binary_accuracy: 0.8997 - val_auc: 0.9271\n",
      "Epoch 17/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2116 - binary_accuracy: 0.9058 - auc: 0.9207 - val_loss: 0.2231 - val_binary_accuracy: 0.8965 - val_auc: 0.9269\n",
      "Epoch 18/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2103 - binary_accuracy: 0.9056 - auc: 0.9209 - val_loss: 0.2143 - val_binary_accuracy: 0.9021 - val_auc: 0.9267\n",
      "Epoch 19/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2109 - binary_accuracy: 0.9055 - auc: 0.9224 - val_loss: 0.2125 - val_binary_accuracy: 0.9032 - val_auc: 0.9284\n",
      "Epoch 20/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2117 - binary_accuracy: 0.9050 - auc: 0.9229 - val_loss: 0.2188 - val_binary_accuracy: 0.8980 - val_auc: 0.9284\n",
      "Epoch 21/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2040 - binary_accuracy: 0.9061 - auc: 0.9273 - val_loss: 0.2164 - val_binary_accuracy: 0.9017 - val_auc: 0.9281\n",
      "Epoch 22/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2107 - binary_accuracy: 0.9059 - auc: 0.9235 - val_loss: 0.2142 - val_binary_accuracy: 0.9000 - val_auc: 0.9291\n",
      "Epoch 23/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2063 - binary_accuracy: 0.9056 - auc: 0.9261 - val_loss: 0.2098 - val_binary_accuracy: 0.9039 - val_auc: 0.9285\n",
      "Epoch 24/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2048 - binary_accuracy: 0.9092 - auc: 0.9252 - val_loss: 0.2111 - val_binary_accuracy: 0.9031 - val_auc: 0.9285\n",
      "Epoch 25/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2099 - binary_accuracy: 0.9053 - auc: 0.9254 - val_loss: 0.2140 - val_binary_accuracy: 0.9017 - val_auc: 0.9283\n",
      "Epoch 26/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.2024 - binary_accuracy: 0.9093 - auc: 0.9285 - val_loss: 0.2143 - val_binary_accuracy: 0.9011 - val_auc: 0.9291\n",
      "Epoch 27/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.1953 - binary_accuracy: 0.9114 - auc: 0.9339 - val_loss: 0.2119 - val_binary_accuracy: 0.9030 - val_auc: 0.9298\n",
      "Epoch 28/100\n",
      "265/265 [==============================] - 0s 2ms/step - loss: 0.1992 - binary_accuracy: 0.9094 - auc: 0.9314 - val_loss: 0.2089 - val_binary_accuracy: 0.9029 - val_auc: 0.9296\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    x_train, y_train,\n",
    "    validation_data=(x_test, y_test),\n",
    "    batch_size=128,\n",
    "    epochs=100,\n",
    "    callbacks=[early_stopping])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='val_binary_accuracy'>"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "_ = pd.DataFrame(history.history)\n",
    "sns.lineplot(y=_.val_binary_accuracy, x=_.index)\n",
    "sns.lineplot(y=_.binary_accuracy, x=_.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='val_auc'>"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(y=_.val_auc, x=_.index)\n",
    "sns.lineplot(y=_.auc, x=_.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7806297628367314, 0.9009997345837388)"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "preds = model.predict(x_test)\n",
    "metrics.roc_auc_score(y_test, preds.round()), metrics.accuracy_score(y_test, preds.round())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
